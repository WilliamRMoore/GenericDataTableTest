@using System;
@using System.ComponentModel;
@using System.Reflection;
@using System.Linq.Expressions

@typeparam GenericType

@if (Items == null)
{
    <img src="https://media4.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif" />
}
else
{
<div class="container">
    <div class="container" align="right">
        <label>Search</label>
        <input @onchange="((ChangeEventArgs e) => UpdateSearchStringFormTable(e))" />
    </div>
    <table class="table">
        <thead>
            <tr>

                @foreach (var prop in Props)
                {
                    //Find the displayname, if it exists.
                    var name = PDesctirptions.Find(prop.Name, true)?.DisplayName ?? prop.Name;

                    <td @onclick="@(() => orderBy(prop.Name))">@name</td>
                }

                @* if we have actions, show them. *@
                @if (ActionFragment != null)
                {
                    <td>Actions</td>
                }

            </tr>
        </thead>
        <tbody>

            @foreach (var item in Items)
            {
                <tr>

                    @foreach (var p in Props)
                    {
                        //Get's the property value of the item to display in the table.
                        <td>@item.GetType().GetProperty(p.Name).GetValue(item).ToString()</td>
                    }

                    @if (ActionFragment != null)
                    {
                        <td>@ActionFragment(item)</td>
                    }

                </tr>
            }

        </tbody>
    </table>
</div>
    
}

@code {

    private bool desc = false;
    private bool firstRender = true;
    private Type T = typeof(GenericType);
    [Parameter] public IEnumerable<GenericType> Items { get; set; }
    [Parameter] public RenderFragment<GenericType> ActionFragment { get; set; }
    [Parameter] public string OrderColumn { get; set; }
    [Parameter] public string SearchString { get; set; }
    [Parameter] public EventCallback<string> OrderColumnChanged {get;set;}
    [Parameter] public EventCallback<string> SearchStringChanged { get; set; }
    [Parameter] public EventCallback Search { get; set; }
    [Parameter] public EventCallback<IEnumerable<GenericType>> getItemsOrdered { get; set; }
    private PropertyInfo[] Props { get; set; }
    private PropertyDescriptorCollection PDesctirptions { get; set; }


    protected override void OnInitialized()
    {
        Console.WriteLine(desc);
        Props = T.GetProperties();
        PDesctirptions = TypeDescriptor.GetProperties(T);

    }

    private async Task SendParentItems()
    {
        await getItemsOrdered.InvokeAsync(Items);
    }

    private async Task UpdateOrderColumnFromTable()
    {
        await OrderColumnChanged.InvokeAsync(OrderColumn);
    }

    private async Task UpdateSearchStringFormTable(ChangeEventArgs e)
    {
        SearchString = e.Value.ToString();
        await SearchStringChanged.InvokeAsync(SearchString);
        await Search.InvokeAsync();
    }

    private async Task orderBy(string ColumnName)
    {
        PropertyDescriptor propertyDescriptor = TypeDescriptor.GetProperties(T).Find(ColumnName, true);

        if (desc)
        {
            Items = Items.OrderBy(item => propertyDescriptor.GetValue(item)).ToList();
            desc = false;
        }
        else
        {
            Items = Items.OrderByDescending(item => propertyDescriptor.GetValue(item)).ToList();
            desc = true;
        }
        OrderColumn = ColumnName;
        await SendParentItems();
        await UpdateOrderColumnFromTable();
    }

    protected override void OnAfterRender(bool firstRender)
    {

    }

}
